from aiogram import Dispatcher, executor, Bot
from states import Registration, GetProduct, Cart, Order
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import buttons as btns
import database
import states
import os
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

bot = Bot(os.getenv('TOKEN'))

dp = Dispatcher(bot, storage=MemoryStorage())

about = (f'–í—Å–µ –Ω–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã: '
         '\n- –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∏–∑ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Å–µ–ª –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.'
         '\n- –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ GMP (–Ω–∞–¥–ª–µ–∂–∞—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏).'
         '\n- –í—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏.'
         '\n- –ù–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö.'
         '\n- –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–±–µ–Ω–æ–≤, —Å–ø–∏—Ä—Ç–∞, —Ñ–æ—Ä–º–∞–ª—å–¥–µ–≥–∏–¥–∞, —Å—É–ª—å—Ñ–∞—Ç–∞, –∞–ª—é–º–∏–Ω–∏—è, –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –æ—Ç–ª–æ–∂–µ–Ω–∏–π, –±–µ–Ω–∑–∏–Ω–æ–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ —Å—ã—Ä—å—è.'
         '\n- –ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–µ—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–Ω—ã–º–∏, –º—É—Ç–∞–≥–µ–Ω–Ω—ã–º–∏ –∏ —Ç–æ–∫—Å–∏—á–Ω—ã–º–∏ –¥–ª—è —Ä–µ–ø—Ä–æ–¥—É–∫—Ü–∏–∏.'
         '\n- –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–¥—É—à–µ–∫, —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∞—Å–∏—Ç–µ–ª–µ–π, –≤—Ä–µ–¥–Ω—ã—Ö –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç–æ–≤, SLS –∏ SLES.'
         '\n- –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ (–ì–ú–û)¬ª —Å—ã—Ä—å—è')


@dp.message_handler(commands=['start'])
async def start_message(message):
    # ---–ü–æ–ª—É—á–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # ---–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ
    checker = database.check_user(user_id)
    if checker:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –û–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–µ ActiveBeeüêù\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ',
                             reply_markup=btns.main_menu())
    else:
        await message.answer(
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!',
            reply_markup=btns.ReplyKeyboardMarkup())
        # ---–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏----
        await Registration.getting_name_state.set()

# ---–≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏----
@dp.message_handler(state=Registration.getting_name_state)
async def get_name(message, state=Registration.getting_name_state):
    # ---–ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è
    user_answer = message.text

    # ---–í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º---
    await state.update_data(name=user_answer)
    await message.answer('–ò–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!', reply_markup=btns.phone_number_kb())

    # ---–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞---
    await Registration.getting_phone_number.set()

# ---–≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞---
@dp.message_handler(state=Registration.getting_phone_number, content_types=['contact'])
async def get_number(message, state=Registration.getting_phone_number):
    # ---–ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç---
    user_answer = message.contact.phone_number

    # ---–í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º---
    await state.update_data(number=user_answer)
    await message.answer('–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ªüë´', reply_markup=btns.gender_kb())

    # ---–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∞
    await Registration.getting_gender.set()

# ---–≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∞
@dp.message_handler(state=Registration.getting_gender)
async def get_location(message, state=Registration.getting_gender):
    # ---–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª
    user_answer = message.text
    await message.answer('–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ωüìù!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())

    # ---–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_info = await state.get_data()
    name = all_info.get('name')
    phone_number = all_info.get('number')
    latitude = all_info.get('latitude')
    longitude = all_info.get('longitude')
    gender = user_answer
    user_id = message.from_user.id
    database.add_user(user_id, name, phone_number, latitude, longitude, gender)
    print(database.get_users())
    # ---–û—Å—Ç–∞–Ω–æ–≤–∫–∞
    await state.finish()

# ----–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö----

@dp.message_handler(state=GetProduct.getting_pr_name, content_types=['text'])
async def choose_count(message):
    user_answer = message.text
    user_id = message.from_user.id
    # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    user_data = await dp.current_state(user=user_id).get_data()
    category_id = user_data.get('category_id')

    actual_products = [i[0] for i in database.get_name_product(category_id)]
    # print(actual_products)
# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–µ –≤—ã–±—Ä–∞–≤ —Ç–æ–≤–∞—Ä
    if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())

        await dp.current_state(user=user_id).finish()

    elif user_answer in actual_products:

        product_info = database.get_all_info_product(user_answer)
        await bot.send_photo(user_id, photo=product_info[4],
                             caption=f'{product_info[0]}\n\n–¶–µ–Ω–∞: {product_info[2]} $\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {product_info[3]}\n\n@activebee_bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£',
                             reply_markup=btns.product_count())

        await dp.current_state(user=user_id).update_data(user_product=message.text, price=product_info[2])

        await states.GetProduct.getting_pr_count.set()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ ---
@dp.message_handler(state=GetProduct.getting_pr_count)
async def text_message3(message, state=GetProduct.getting_pr_count):
    product_count = message.text
    user_data = await state.get_data()
    user_product = user_data.get('user_product')
    category_id = user_data.get('category_id')
    pr_price = float(user_data.get('price').replace(',', '.'))

    if product_count.isnumeric():
        database.add_pr_to_cart(message.from_user.id, user_product, pr_price, int(product_count))

        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É‚úÖ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.catalog_folder())
        await state.finish()

    elif message.text != '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏üîΩ', reply_markup=btns.product_count())

    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞üîΩ', reply_markup=btns.count_kb(category_id))
        await states.GetProduct.getting_pr_name.set()


# ---–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(state=Cart.waiting_for_product)
async def cart_function(message, state=Cart.waiting_for_product):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
        await dp.current_state(user=message.from_user.id).finish()

    # ---–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ
    elif user_answer == '–û—á–∏—Å—Ç–∏—Ç—åüÜë':
        # ---–û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –±–∞–∑—ã(–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        database.delete_from_cart(user_id)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞‚úÖ\n\n‚ùóÔ∏è‚ùóÔ∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥‚ùóÔ∏è‚ùóÔ∏è')
    # else:
    #     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥')

    if user_answer == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑‚úÖ':
        # ---–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        user_cart = database.get_user_cart(message.from_user.id)
        # ---–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ –≤ –±–∞–∑–µ
        if user_cart:
            # ---–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖüîΩ:\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
                total_price += i[3]

            admin_message += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}'
        await message.answer('–†–∞–∑–¥–µ–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞üîΩ', reply_markup=btns.confirmation_kb())

    elif user_answer == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è', reply_markup=btns.main_menu())

    elif user_answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        # ---–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        user_cart = database.get_user_cart(message.from_user.id)
        # ---–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ –≤ –±–∞–∑–µ
        if user_cart:
            # ---–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖüîΩ:\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                total_price += i[3]

            admin_message += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$'
            # ---–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(result_answer, reply_markup=btns.main_menu())
            print(user_cart)
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n\n')
            await state.finish()
            # ---–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
            await bot.send_message(5928000362, admin_message)
            # await bot.send_message(123283566, admin_message)
            # ---–û—á–∏—Å—Ç–∏–º –∫–æ—Ä–∑–∏–Ω—É
            database.delete_from_cart(user_id)


# ---–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(content_types=['text'])
async def main_menu(message):
    user_answer = message.text
    user_id = message.from_user.id

    # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_answer == '–ö–æ—Ä–∑–∏–Ω–∞üóë':
        # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cart = database.get_user_cart(message.from_user.id)
        # ---–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ –≤ –±–∞–∑–µ
        if user_cart:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result_answer = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞üóë:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                total_price += i[3]
            await message.answer(result_answer, reply_markup=btns.cart_kb())
            await Cart.waiting_for_product.set()

        else:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüóë')

    # ---–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç
    if user_answer == '–ö–∞—Ç–∞–ª–æ–≥üì¶':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())

    elif user_answer == '–ù–∞–∑–∞–¥üîô':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())

    elif user_answer == '–ö–ê–ü–õ–ò / –°–ü–†–ï–ò':
        await dp.current_state(user=user_id).update_data(category_id=11)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.spray_kb())
        await states.GetProduct.getting_pr_name.set()

    elif user_answer == '–ö–ê–ü–°–£–õ–´ / –¢–ê–ë–õ–ï–¢–ö–ò':
        await dp.current_state(user=user_id).update_data(category_id=22)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.tablets_kb())
        await states.GetProduct.getting_pr_name.set()

    elif user_answer == '–°–ò–†–û–ü–´':
        await dp.current_state(user=user_id).update_data(category_id=33)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.syrup_kb())
        await states.GetProduct.getting_pr_name.set()

    elif user_answer == '–ü–ê–°–¢–´':
        await dp.current_state(user=user_id).update_data(category_id=44)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.pastes_kb())
        await states.GetProduct.getting_pr_name.set()

    elif user_answer == '–û–°–¢–ê–õ–¨–ù–û–ï':
        await dp.current_state(user=user_id).update_data(category_id=55)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.other_pr_kb())
        await states.GetProduct.getting_pr_name.set()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä
    if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())

    elif user_answer == '–û –Ω–∞—Å':
        await message.answer(about)

    elif user_answer == '–ö–æ–Ω—Ç–∞–∫—Ç—ã‚òéÔ∏è':
        await message.answer(f'üìû –¢–µ–ª–µ—Ñ–æ–Ω:\n+998990952992\n+998990902992 \n\nTelegram: @activebee_tashkent'
                             f'\n\nüöö  –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É: 20000 —Å—É–º')

    elif user_answer == '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤üìÑ':
        # ---–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        user_cart = database.get_user_cart(message.from_user.id)
        # ---–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ –≤ –±–∞–∑–µ
        if user_cart:
            # ---–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖüîΩ:\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                total_price += i[3]

            admin_message += f'-–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$'
            # ---–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(result_answer, reply_markup=btns.order_kb())

            await Order.waiting_accept.set()

        else:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüóë\n\n'
                                 '–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <–ö–∞—Ç–∞–ª–æ–≥>')

# Order list
@dp.message_handler(state=Order.waiting_accept)
async def accept_order(message):
    user_answer = message.text
    user_id = message.from_user.id
    if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ActiveBee‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
        await dp.current_state(user=message.from_user.id).finish()

    elif user_answer == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        # ---–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        user_cart = database.get_user_cart(message.from_user.id)
        # ---–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ –≤ –±–∞–∑–µ
        if user_cart:
            # ---–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖüîΩ:\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}\n\n'
                admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}\n\n'
                total_price += i[3]

            admin_message += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$'
            # ---–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(result_answer, reply_markup=btns.main_menu())
            print(user_cart)
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n\n')
            await bot.send_message(5928000362, admin_message)
            await dp.current_state(user=message.from_user.id).finish()
            database.delete_from_cart(user_id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)